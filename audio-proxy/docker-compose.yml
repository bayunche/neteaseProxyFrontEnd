version: '3.8'

services:
  audio-proxy:
    build: .
    container_name: audio-proxy-server
    restart: unless-stopped
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=production
      - PORT=3001
    networks:
      - audio-proxy-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.audio-proxy.rule=Host(`audio-proxy.your-domain.com`)"
      - "traefik.http.routers.audio-proxy.tls=true"
      - "traefik.http.routers.audio-proxy.tls.certresolver=letsencrypt"
      - "traefik.http.services.audio-proxy.loadbalancer.server.port=3001"
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"

  # 可选：Nginx反向代理（如果不使用Traefik）
  nginx:
    image: nginx:alpine
    container_name: audio-proxy-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - audio-proxy
    networks:
      - audio-proxy-network
    profiles:
      - nginx

  # 可选：Redis缓存层
  redis:
    image: redis:7-alpine
    container_name: audio-proxy-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-audioProxyRedis2024}
    volumes:
      - redis_data:/data
    networks:
      - audio-proxy-network
    profiles:
      - cache

networks:
  audio-proxy-network:
    driver: bridge

volumes:
  redis_data:
    driver: local